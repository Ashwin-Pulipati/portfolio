{"version":3,"file":"static/js/2754.758c5071.chunk.js","mappings":"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","sources":["components/contact/Contact.constants.js","components/contact/components/ContactBanner.jsx","components/contact/Contact.jsx"],"sourcesContent":["// import {\n//   FaEnvelope,\n//   FaLinkedinIn,\n//   FaGithub,\n// } from \"react-icons/fa\";\n\n// export const contactMethods = [\n//   {\n//     id: \"email\",\n//     label: \"Email Ashwin Pulipati\",\n//     icon: <FaEnvelope className=\"text-red-600 dark:text-red-500\" />,\n//     href: \"mailto:ashwinpulipati@gmail.com\",\n//     copyText: \"ashwinpulipati@gmail.com\",\n//     external: false,\n//     copiedColor: \"text-red-600 dark:text-red-500\",\n//   },\n//   {\n//     id: \"linkedin\",\n//     label: \"Visit LinkedIn profile of Ashwin Pulipati\",\n//     icon: <FaLinkedinIn className=\"text-blue-600\" />,\n//     href: \"https://www.linkedin.com/in/ashwinpulipati\",\n//     copyText: \"https://www.linkedin.com/in/ashwinpulipati\",\n//     external: true,\n//     copiedColor: \"text-blue-600\",\n//   },\n//   {\n//     id: \"github\",\n//     label: \"Visit GitHub profile of Ashwin Pulipati\",\n//     icon: <FaGithub className=\"text-black dark:text-white\" />,\n//     href: \"https://github.com/Ashwin-Pulipati\",\n//     copyText: \"https://github.com/Ashwin-Pulipati\",\n//     external: true,\n//     copiedColor: \"\",\n//   },\n// ];\n\n\n// export const groupedInputs = [\n//   {\n//     groupClass: \"flex flex-wrap gap-6 xs:flex-col sm:flex-col md:flex-row\",\n//     fields: [\n//       { label: \"Your Name\", name: \"username\", id: \"username\", type: \"text\" },\n//       {\n//         label: \"Phone Number\",\n//         name: \"phoneNumber\",\n//         id: \"phoneNumber\",\n//         type: \"text\",\n//       },\n//     ],\n//   },\n//   {\n//     groupClass: \"flex flex-col gap-4 font-titleFont\",\n//     fields: [{ label: \"Email\", name: \"email\", id: \"email\", type: \"email\" }],\n//   },\n//   {\n//     groupClass: \"flex flex-col gap-4 font-titleFont\",\n//     fields: [\n//       { label: \"Subject\", name: \"subject\", id: \"subject\", type: \"text\" },\n//     ],\n//   },\n//   {\n//     groupClass: \"flex flex-col gap-4 font-titleFont\",\n//     fields: [\n//       {\n//         label: \"Message\",\n//         name: \"message\",\n//         id: \"message\",\n//         type: \"textarea\",\n//         rows: 6,\n//       },\n//     ],\n//   },\n// ];\n  \n\n\n// Contact.constants.js\n\nimport { FaEnvelope, FaLinkedinIn, FaGithub } from \"react-icons/fa\";\n\nexport const contactMethods = [\n  {\n    id: \"email\",\n    label: \"Email Ashwin Pulipati\",\n    icon: <FaEnvelope className=\"text-red-600 dark:text-red-500\" />,\n    href: \"mailto:ashwinpulipati@gmail.com\",\n    copyText: \"ashwinpulipati@gmail.com\",\n    external: false,\n    copiedColor: \"text-red-600 dark:text-red-500\",\n  },\n  {\n    id: \"linkedin\",\n    label: \"Visit LinkedIn profile of Ashwin Pulipati\",\n    icon: <FaLinkedinIn className=\"text-blue-600\" />,\n    href: \"https://www.linkedin.com/in/ashwinpulipati\",\n    copyText: \"https://www.linkedin.com/in/ashwinpulipati\",\n    external: true,\n    copiedColor: \"text-blue-600\",\n  },\n  {\n    id: \"github\",\n    label: \"Visit GitHub profile of Ashwin Pulipati\",\n    icon: <FaGithub className=\"text-black dark:text-white\" />,\n    href: \"https://github.com/Ashwin-Pulipati\",\n    copyText: \"https://github.com/Ashwin-Pulipati\",\n    external: true,\n    copiedColor: \"\",\n  },\n];\n\nexport const groupedInputs = [\n  {\n    groupClass: \"flex flex-wrap gap-6 xs:flex-col sm:flex-col md:flex-row\",\n    fields: [\n      { label: \"Your Name\", name: \"username\", id: \"username\", type: \"text\" },\n      {\n        label: \"Phone Number\",\n        name: \"phoneNumber\",\n        id: \"phoneNumber\",\n        type: \"text\",\n      },\n    ],\n  },\n  {\n    groupClass: \"flex flex-col gap-4 font-titleFont\",\n    fields: [{ label: \"Email\", name: \"email\", id: \"email\", type: \"email\" }],\n  },\n  {\n    groupClass: \"flex flex-col gap-4 font-titleFont\",\n    fields: [\n      { label: \"Subject\", name: \"subject\", id: \"subject\", type: \"text\" },\n    ],\n  },\n  {\n    groupClass: \"flex flex-col gap-4 font-titleFont\",\n    fields: [\n      {\n        label: \"Message\",\n        name: \"message\",\n        id: \"message\",\n        type: \"textarea\",\n        rows: 6,\n      },\n    ],\n  },\n];\n","// import React, { useState, useCallback } from \"react\";\n// import ContactMe from \"../../../assets/images/Webp/contact-left.webp\";\n// import { createRipple } from \"../../layouts/RippleEffect\";\n// import { motion } from \"framer-motion\";\n// import { contactMethods } from \"../Contact.constants\";\n// import { FaCheckCircle } from \"react-icons/fa\";\n\n// const ContactLeft = () => {\n//   const [copied, setCopied] = useState(\"\");\n\n//   const handleCopy = useCallback(\n//     (text, type) => {\n//       navigator.clipboard.writeText(text).then(() => {\n//         setCopied(type);\n//         setTimeout(() => setCopied(\"\"), 2000);\n//       });\n//     },\n//     [setCopied]\n//   );\n\n//   return (\n//     <motion.div\n//       initial={{ opacity: 0, scale: 0.85 }}\n//       whileInView={{ opacity: 1, scale: 1 }}\n//       transition={{ duration: 1, ease: \"easeInOut\" }}\n//       viewport={{ once: false }}\n//       className=\"w-full xl:w-[35%] h-full p-6 md:p-10 lg:p-8 xl:p-9 flex flex-col gap-8 justify-center\n//              group hover:bg-gradient-to-br hover:from-[#a0f0f4] hover:via-[#b78fff] hover:to-[#ff9aad]\n//              dark:hover:bg-gradient-to-br dark:hover:from-[#0d7998] dark:hover:via-[#4f2a7a] dark:hover:to-[#8a3a48]\n//              cardView rounded-lg\"\n//     >\n//       <div className=\"w-full h-4/5 overflow-hidden rounded-lg\">\n//         <img\n//           className=\"w-full h-44 md:h-64 object-cover hover:scale-105 duration-300 cursor-pointer\"\n//           src={ContactMe}\n//           width=\"500\"\n//           height=\"300\"\n//           alt=\"contactImg\"\n//         />\n//       </div>\n//       <div className=\"flex flex-col gap-4\">\n//         <span\n//           className=\"pt-3 md:pt-0 lg:pt-0 xs:block md:inline text-3xl md:text-5xl lg:text-4xl xl:text-5xl px-1 w-fit h-fit\n//           textGradient group-hover:text-black dark:group-hover:text-white capitalize font-nameFont shadow-textShadow\"\n//         >\n//           Ashwin Pulipati\n//         </span>\n//         <p className=\"text-xl font-medium text-gray-700 dark:text-gray-400 group-hover:text-black dark:group-hover:text-text-gray-300\">\n//           Full Stack Software Engineer\n//         </p>\n//         <p className=\"text-md font-normal text-gray-700 dark:text-gray-400 group-hover:text-black dark:group-hover:text-gray-300\">\n//           Reach out to me effortlessly through the preferred communication\n//           channels below. I value clear and seamless connections, ensuring every\n//           interaction is straightforward and efficient.\n//         </p>\n//       </div>\n//       <div className=\"flex flex-col gap-4 group\">\n//         <h2 className=\"text-base uppercase font-titleFont mb-4 tracking-[2px] group-hover:text-black dark:group-hover:text-gray-300\">\n//           REACH ME OUT\n//         </h2>\n//         <div className=\"flex gap-6\">\n//           {contactMethods.map(\n//             ({ id, label, icon, href, copyText, external, copiedColor }) => (\n//               <button\n//                 key={id}\n//                 className=\"flex flex-col gap-3\"\n//                 onClick={(e) => {\n//                   e.preventDefault();\n//                   handleCopy(copyText, id);\n//                   if (external)\n//                     window.open(href, \"_blank\", \"noopener,noreferrer\");\n//                 }}\n//                 aria-label=\"Contact Me\"\n//               >\n//                 <div\n//                   className=\"bannerIcon zoomIcon group-hover:shadow-none ripple-container\"\n//                   onMouseDown={createRipple}\n//                 >\n//                   <a\n//                     href={href}\n//                     aria-label={label}\n//                     title={label}\n//                     {...(external\n//                       ? { target: \"_blank\", rel: \"noopener noreferrer\" }\n//                       : {})}\n//                   >\n//                     {icon}\n//                   </a>\n//                 </div>\n//                 {copied === id && (\n//                   <div\n//                     className={`text-xs flex items-center gap-1 mt-1 ${copiedColor}`}\n//                   >\n//                     <FaCheckCircle />\n//                     <span>Copied!</span>\n//                   </div>\n//                 )}\n//               </button>\n//             )\n//           )}\n//         </div>\n//       </div>\n//     </motion.div>\n//   );\n// };\n\n// export default React.memo(ContactLeft);\n\n\n\n// ContactBanner.jsx\n\nimport React, { useState, useCallback, useMemo } from \"react\";\nimport ContactMe from \"../../../assets/images/Webp/contact-left.webp\";\nimport { createRipple } from \"../../layouts/RippleEffect\";\nimport { motion } from \"framer-motion\";\nimport { contactMethods } from \"../Contact.constants\";\nimport { FaCheckCircle } from \"react-icons/fa\";\n\nconst ContactLeft = () => {\n  const [copied, setCopied] = useState(\"\");\n\n  const handleCopy = useCallback(\n    (text, type) => {\n      navigator.clipboard.writeText(text).then(() => {\n        setCopied(type);\n        setTimeout(() => setCopied(\"\"), 2000);\n      });\n    },\n    []\n  );\n\n  // Memoize the mapped contact buttons\n  const renderedButtons = useMemo(\n    () =>\n      contactMethods.map(\n        ({ id, label, icon, href, copyText, external, copiedColor }) => (\n          <button\n            key={id}\n            className=\"flex flex-col gap-3\"\n            onClick={(e) => {\n              e.preventDefault();\n              handleCopy(copyText, id);\n              if (external) window.open(href, \"_blank\", \"noopener,noreferrer\");\n            }}\n            aria-label=\"Contact Me\"\n          >\n            <div\n              className=\"bannerIcon zoomIcon group-hover:shadow-none ripple-container\"\n              onMouseDown={createRipple}\n            >\n              <a\n                href={href}\n                aria-label={label}\n                title={label}\n                {...(external\n                  ? { target: \"_blank\", rel: \"noopener noreferrer\" }\n                  : {})}\n              >\n                {icon}\n              </a>\n            </div>\n            {copied === id && (\n              <div\n                className={`text-xs flex items-center gap-1 mt-1 ${copiedColor}`}\n              >\n                <FaCheckCircle />\n                <span>Copied!</span>\n              </div>\n            )}\n          </button>\n        )\n      ),\n    [copied, handleCopy]\n  );\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.85 }}\n      whileInView={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 1, ease: \"easeInOut\" }}\n      viewport={{ once: false }}\n      className=\"w-full xl:w-[35%] h-full p-6 md:p-10 lg:p-8 xl:p-9 flex flex-col gap-8 justify-center \n        group hover:bg-gradient-to-br hover:from-[#a0f0f4] hover:via-[#b78fff] hover:to-[#ff9aad] \n        dark:hover:bg-gradient-to-br dark:hover:from-[#0d7998] dark:hover:via-[#4f2a7a] dark:hover:to-[#8a3a48] \n        cardView rounded-lg\"\n    >\n      <div className=\"w-full h-4/5 overflow-hidden rounded-lg\">\n        <img\n          className=\"w-full h-44 md:h-64 object-cover hover:scale-105 duration-300 cursor-pointer\"\n          src={ContactMe}\n          width=\"500\"\n          height=\"300\"\n          alt=\"contactImg\"\n        />\n      </div>\n      <div className=\"flex flex-col gap-4\">\n        <span\n          className=\"pt-3 md:pt-0 lg:pt-0 xs:block md:inline text-3xl md:text-5xl lg:text-4xl xl:text-5xl px-1 w-fit h-fit \n          textGradient group-hover:text-black dark:group-hover:text-white capitalize font-nameFont shadow-textShadow\"\n        >\n          Ashwin Pulipati\n        </span>\n        <p className=\"text-xl font-medium text-gray-700 dark:text-gray-400 group-hover:text-black dark:group-hover:text-text-gray-300\">\n          Full Stack Software Engineer\n        </p>\n        <p className=\"text-md font-normal text-gray-700 dark:text-gray-400 group-hover:text-black dark:group-hover:text-gray-300\">\n          Reach out to me effortlessly through the preferred communication\n          channels below. I value clear and seamless connections, ensuring every\n          interaction is straightforward and efficient.\n        </p>\n      </div>\n      <div className=\"flex flex-col gap-4 group\">\n        <h2 className=\"text-base uppercase font-titleFont mb-4 tracking-[2px] group-hover:text-black dark:group-hover:text-gray-300\">\n          REACH ME OUT\n        </h2>\n        <div className=\"flex gap-6\">{renderedButtons}</div>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default React.memo(ContactLeft);\n","// import emailjs from \"emailjs-com\";\n// import { motion } from \"framer-motion\";\n// import React, { useCallback, useEffect, useState } from \"react\";\n// import { BsPatchExclamationFill } from \"react-icons/bs\";\n// import { PiSealCheckFill } from \"react-icons/pi\";\n// import { toast, ToastContainer } from \"react-toastify\";\n// import \"react-toastify/dist/ReactToastify.css\";\n// import { createRipple } from \"../layouts/RippleEffect\";\n// import Title from \"../layouts/Title\";\n// import ContactBanner from \"./components/ContactBanner\";\n// import { groupedInputs } from \"./Contact.constants\";\n// import \"./Contact.css\";\n\n// const Contact = () => {\n//   const [formData, setFormData] = useState({\n//     username: \"\",\n//     phoneNumber: \"\",\n//     email: \"\",\n//     subject: \"\",\n//     message: \"\",\n//   });\n\n//   useEffect(() => {\n//     const savedData = localStorage.getItem(\"contactFormData\");\n//     if (savedData) {\n//       setFormData(JSON.parse(savedData));\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     localStorage.setItem(\"contactFormData\", JSON.stringify(formData));\n//   }, [formData]);\n\n//   const [touched, setTouched] = useState({});\n\n//   const validateField = (name, value) =>\n//     !value.trim() && name !== \"phoneNumber\"\n//       ? \"This is a required field.\"\n//       : {\n//           email: !value.match(/(@gmail\\.com|\\.edu)$/i)\n//             ? \"Use Gmail or student email.\"\n//             : \"\",\n//           phoneNumber: value.trim()\n//             ? value.includes(\"+\")\n//               ? \"Please avoid country codes\"\n//               : /^\\d{10}$/.test(value)\n//               ? \"\"\n//               : \"Phone number must be exactly 10 digits\"\n//             : \"\",\n//         }[name] || \"\";\n\n//   const handleChange = useCallback((e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevState) => ({ ...prevState, [name]: value }));\n//     setTouched((prev) => ({ ...prev, [name]: true }));\n//   }, []);\n\n//   const handleSend = useCallback(\n//     async (e) => {\n//       e.preventDefault();\n//       const { username, phoneNumber, email, subject, message } = formData;\n\n//       if (!username || !email || !subject || !message) {\n//         toast.error(\"All fields are required!\", {\n//           className: \"custom-toast\",\n//           progressClassName: \"custom-toast-error-progress\",\n//           position: \"top-right\",\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//         });\n//         return;\n//       }\n\n//       const emailError = validateField(\"email\", email);\n//       const phoneError = validateField(\"phoneNumber\", phoneNumber);\n//       if (emailError || phoneError) {\n//         toast.error(emailError || phoneError, {\n//           className: \"custom-toast\",\n//           progressClassName: \"custom-toast-error-progress\",\n//           position: \"top-right\",\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//         });\n//         return;\n//       }\n\n//       const templateParams = {\n//         subject: subject,\n//         to_name: \"Ashwin\",\n//         from_name: username,\n//         message: message,\n//         from_email: email,\n//         phone_number: phoneNumber,\n//       };\n\n//       try {\n//         await emailjs.send(\n//           process.env.REACT_APP_SERVICE_ID,\n//           process.env.REACT_APP_TEMPLATE_ID,\n//           templateParams,\n//           process.env.REACT_APP_EMAILJS_PUBLIC_KEY\n//         );\n//         toast.success(\"Message sent successfully!\", {\n//           className: \"custom-toast\",\n//           progressClassName: \"custom-toast-success-progress\",\n//           position: \"top-right\",\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//         });\n//         setFormData({\n//           username: \"\",\n//           phoneNumber: \"\",\n//           email: \"\",\n//           subject: \"\",\n//           message: \"\",\n//         });\n//         setTouched({});\n//       } catch (error) {\n//         toast.error(\"Something went wrong. Please try again.\", {\n//           className: \"custom-toast\",\n//           progressClassName: \"custom-toast-error-progress\",\n//           position: \"top-right\",\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//         });\n//       }\n//     },\n//     [formData]\n//   );\n\n//   const renderField = (field) => {\n//     const value = formData[field.name];\n//     const errorMessage = touched[field.name]\n//       ? validateField(field.name, value)\n//       : \"\";\n//     const iconStyle = {\n//       position: \"absolute\",\n//       right: \"16px\",\n//       top: \"50%\",\n//       transform: \"translateY(-50%)\",\n//       fontSize: \"18px\",\n//     };\n\n//     if (field.type === \"textarea\") {\n//       return (\n//         <fieldset\n//           key={field.name}\n//           className=\"flex-1 flex flex-col gap-4 font-titleFont\"\n//         >\n//           <label\n//             htmlFor={field.id}\n//             className=\"text-sm text-gray-500 dark:text-gray-400 font-semibold uppercase tracking-[2px]\"\n//           >\n//             {field.label} <span className=\"text-red-500\">*</span>\n//           </label>\n//           <div className=\"relative\">\n//             <div className=\"h-fit w-full rounded-md hoverFocusGradient p-[2px]\">\n//               <div className=\"flex h-full rounded-md w-full items-center justify-center font-normal relative\">\n//                 <textarea\n//                   id={field.id}\n//                   name={field.name}\n//                   value={value}\n//                   onChange={handleChange}\n//                   rows={field.rows || 4}\n//                   className=\"contactTextArea text-gray-600 dark:text-gray-200\"\n//                   {...(field.name === \"phoneNumber\" ? {} : { required: true })}\n//                 ></textarea>\n//                 {touched[field.name] &&\n//                   (errorMessage ? (\n//                     <span style={iconStyle}>\n//                       <BsPatchExclamationFill className=\"w-4 h-4 text-red-600 dark:text-red-500\" />\n//                     </span>\n//                   ) : (\n//                     <span style={iconStyle}>\n//                       <PiSealCheckFill className=\"w-5 h-5 text-green-600 dark:text-green-500\" />\n//                     </span>\n//                   ))}\n//               </div>\n//             </div>\n//             {touched[field.name] && errorMessage && (\n//               <div className=\"text-red-600 dark:text-red-500 text-xs mt-1 ml-1.5\">\n//                 {errorMessage}\n//               </div>\n//             )}\n//           </div>\n//         </fieldset>\n//       );\n//     } else {\n//       return (\n//         <fieldset\n//           key={field.name}\n//           className=\"flex-1 flex flex-col gap-4 font-titleFont\"\n//         >\n//           <label\n//             htmlFor={field.id}\n//             className=\"text-sm text-gray-500 dark:text-gray-400 font-semibold uppercase tracking-[2px]\"\n//           >\n//             {field.label}{\" \"}\n//             {field.label !== \"Phone Number\" ? (\n//               <span className=\"text-red-500\">*</span>\n//             ) : (\n//               <span className=\"text-gray-400 italic lowercase\">(Optional)</span>\n//             )}\n//           </label>\n//           <div className=\"relative\">\n//             <div\n//               className=\"p-0.5 font-normal rounded-md hoverFocusGradient\"\n//               style={{ position: \"relative\" }}\n//             >\n//               <input\n//                 id={field.id}\n//                 type={field.type}\n//                 name={field.name}\n//                 value={value}\n//                 onChange={handleChange}\n//                 {...(field.name === \"phoneNumber\"\n//                   ? { maxLength: 10 }\n//                   : { required: true })}\n//                 className=\"contactInput text-gray-600 dark:text-gray-200 \"\n//               />\n//               {touched[field.name] &&\n//                 (errorMessage ? (\n//                   <span style={iconStyle}>\n//                     <BsPatchExclamationFill className=\"w-4 h-4 text-red-600 dark:text-red-500\" />\n//                   </span>\n//                 ) : (\n//                   <span style={iconStyle}>\n//                     <PiSealCheckFill className=\"w-5 h-5 text-green-600 dark:text-green-500\" />\n//                   </span>\n//                 ))}\n//             </div>\n//             {touched[field.name] && errorMessage && (\n//               <div className=\"text-red-600 dark:text-red-500 text-xs mt-1 ml-1.5\">\n//                 {errorMessage}\n//               </div>\n//             )}\n//           </div>\n//         </fieldset>\n//       );\n//     }\n//   };\n\n//   return (\n//     <section\n//       id=\"contact\"\n//       className=\"w-full py-14 px-6 sm:px-8 md:px-12 lg:px-16  xl:px-20 \"\n//     >\n//       <div className=\"border-b border-b-gray-400 dark:border-b-black pb-20\">\n//         <Title title=\"HIRE ME\" des=\"Contact Me\" />\n//         <div className=\"w-full\">\n//           <div className=\"w-full h-auto flex flex-col lg:flex-row justify-between xs:gap-y-8 md:gap-y-10 lg:gap-8 \">\n//             <ContactBanner />\n//             <motion.div\n//               initial={{ scale: 0.8, opacity: 0 }}\n//               whileInView={{ scale: 1, opacity: 1 }}\n//               transition={{ duration: 1, ease: \"easeInOut\" }}\n//               viewport={{ once: false }}\n//               className=\"w-full xl:w-[60%] h-full py-10 px-8 sm:px-6 md:px-10 xl:px-8 xl:py-8 flex flex-col gap-8 cardView rounded-lg\"\n//             >\n//               <form\n//                 className=\"flex flex-col gap-4 xl:gap-6 py-2 xl:py-5\"\n//                 onSubmit={handleSend}\n//               >\n//                 {groupedInputs.map((group, index) => (\n//                   <fieldset key={index} className={group.groupClass}>\n//                     {group.fields.map((field) => renderField(field))}\n//                   </fieldset>\n//                 ))}\n//                 <div className=\"group relative inline-block p-0.5 rounded-md bg-transparent hover:rounded-full elevatedShadow\">\n//                   <button\n//                     type=\"submit\"\n//                     className=\"ripple-container w-full relative uppercase z-10 px-6 py-3 text-titleFont font-medium rounded-md\n//                     cardGradient hover:bg-none hover:rounded-full hover:bg-green-100\n//                     hover:text-green-800  dark:hover:bg-none dark:hover:bg-green-800 dark:hover:text-green-100 tracking-[2px]\"\n//                     onMouseDown={createRipple}\n//                     aria-label=\"Send Message\"\n//                   >\n//                     Send Message\n//                   </button>\n//                   <span\n//                     className=\"absolute inset-0 z-0 rounded-md appGradient opacity-0 group-hover:opacity-100\n//                     transition-opacity duration-300 pointer-events-none group-hover:rounded-full\"\n//                   ></span>\n//                 </div>\n//               </form>\n//             </motion.div>\n//           </div>\n//         </div>\n//       </div>\n//       <ToastContainer\n//         position=\"top-right\"\n//         autoClose={3000}\n//         className=\"custom-toast-container\"\n//         toastClassName={(context) =>\n//           context?.type === \"success\"\n//             ? \"custom-toast dark:custom-toast\"\n//             : \"custom-toast-error dark:custom-toast-error\"\n//         }\n//         progressClassName={(context) =>\n//           context?.type === \"success\"\n//             ? \"custom-toast-success-progress dark:custom-toast-success-progress\"\n//             : \"custom-toast-error-progress dark:custom-toast-error-progress\"\n//         }\n//       />\n//     </section>\n//   );\n// };\n\n// export default React.memo(Contact);\n\n\n\n// Contact.jsx\n\nimport emailjs from \"emailjs-com\";\nimport { motion } from \"framer-motion\";\nimport React, { useCallback, useEffect, useState, useMemo } from \"react\";\nimport { BsPatchExclamationFill } from \"react-icons/bs\";\nimport { PiSealCheckFill } from \"react-icons/pi\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { createRipple } from \"../layouts/RippleEffect\";\nimport Title from \"../layouts/Title\";\nimport ContactBanner from \"./components/ContactBanner\";\nimport { groupedInputs } from \"./Contact.constants\";\nimport \"./Contact.css\";\n\nconst Contact = () => {\n  const [formData, setFormData] = useState({\n    username: \"\",\n    phoneNumber: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\",\n  });\n\n  useEffect(() => {\n    const savedData = localStorage.getItem(\"contactFormData\");\n    if (savedData) {\n      setFormData(JSON.parse(savedData));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"contactFormData\", JSON.stringify(formData));\n  }, [formData]);\n\n  const [touched, setTouched] = useState({});\n\n  const validateField = useCallback((name, value) => {\n    if (!value.trim() && name !== \"phoneNumber\") {\n      return \"This is a required field.\";\n    }\n    if (name === \"email\") {\n      return !value.match(/(@gmail\\.com|\\.edu)$/i)\n        ? \"Use Gmail or student email.\"\n        : \"\";\n    }\n    if (name === \"phoneNumber\") {\n      if (!value.trim()) return \"\";\n      if (value.includes(\"+\")) return \"Please avoid country codes\";\n      return /^\\d{10}$/.test(value) ? \"\" : \"Phone number must be exactly 10 digits\";\n    }\n    return \"\";\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n    setTouched((prev) => ({ ...prev, [name]: true }));\n  }, []);\n\n  const handleSend = useCallback(\n    async (e) => {\n      e.preventDefault();\n      const { username, phoneNumber, email, subject, message } = formData;\n      if (!username || !email || !subject || !message) {\n        toast.error(\"All fields are required!\", {\n          className: \"custom-toast\",\n          progressClassName: \"custom-toast-error-progress\",\n          position: \"top-right\",\n          autoClose: 3000,\n          hideProgressBar: false,\n        });\n        return;\n      }\n      const emailError = validateField(\"email\", email);\n      const phoneError = validateField(\"phoneNumber\", phoneNumber);\n      if (emailError || phoneError) {\n        toast.error(emailError || phoneError, {\n          className: \"custom-toast\",\n          progressClassName: \"custom-toast-error-progress\",\n          position: \"top-right\",\n          autoClose: 3000,\n          hideProgressBar: false,\n        });\n        return;\n      }\n      const templateParams = {\n        subject,\n        to_name: \"Ashwin\",\n        from_name: username,\n        message,\n        from_email: email,\n        phone_number: phoneNumber,\n      };\n      try {\n        await emailjs.send(\n          process.env.REACT_APP_SERVICE_ID,\n          process.env.REACT_APP_TEMPLATE_ID,\n          templateParams,\n          process.env.REACT_APP_EMAILJS_PUBLIC_KEY\n        );\n        toast.success(\"Message sent successfully!\", {\n          className: \"custom-toast\",\n          progressClassName: \"custom-toast-success-progress\",\n          position: \"top-right\",\n          autoClose: 3000,\n          hideProgressBar: false,\n        });\n        setFormData({\n          username: \"\",\n          phoneNumber: \"\",\n          email: \"\",\n          subject: \"\",\n          message: \"\",\n        });\n        setTouched({});\n      } catch (error) {\n        toast.error(\"Something went wrong. Please try again.\", {\n          className: \"custom-toast\",\n          progressClassName: \"custom-toast-error-progress\",\n          position: \"top-right\",\n          autoClose: 3000,\n          hideProgressBar: false,\n        });\n      }\n    },\n    [formData, validateField]\n  );\n\n  const renderField = useCallback(\n    (field) => {\n      const value = formData[field.name];\n      const errorMessage = touched[field.name]\n        ? validateField(field.name, value)\n        : \"\";\n      const iconStyle = {\n        position: \"absolute\",\n        right: \"16px\",\n        top: \"50%\",\n        transform: \"translateY(-50%)\",\n        fontSize: \"18px\",\n      };\n\n      if (field.type === \"textarea\") {\n        return (\n          <fieldset\n            key={field.name}\n            className=\"flex-1 flex flex-col gap-4 font-titleFont\"\n          >\n            <label\n              htmlFor={field.id}\n              className=\"text-sm text-gray-500 dark:text-gray-400 font-semibold uppercase tracking-[2px]\"\n            >\n              {field.label} <span className=\"text-red-500\">*</span>\n            </label>\n            <div className=\"relative\">\n              <div className=\"h-fit w-full rounded-md hoverFocusGradient p-[2px]\">\n                <div className=\"flex h-full rounded-md w-full items-center justify-center font-normal relative\">\n                  <textarea\n                    id={field.id}\n                    name={field.name}\n                    value={value}\n                    onChange={handleChange}\n                    rows={field.rows || 4}\n                    className=\"contactTextArea text-gray-600 dark:text-gray-200\"\n                    {...(field.name === \"phoneNumber\" ? {} : { required: true })}\n                  ></textarea>\n                  {touched[field.name] &&\n                    (errorMessage ? (\n                      <span style={iconStyle}>\n                        <BsPatchExclamationFill className=\"w-4 h-4 text-red-600 dark:text-red-500\" />\n                      </span>\n                    ) : (\n                      <span style={iconStyle}>\n                        <PiSealCheckFill className=\"w-5 h-5 text-green-600 dark:text-green-500\" />\n                      </span>\n                    ))}\n                </div>\n              </div>\n              {touched[field.name] && errorMessage && (\n                <div className=\"text-red-600 dark:text-red-500 text-xs mt-1 ml-1.5\">\n                  {errorMessage}\n                </div>\n              )}\n            </div>\n          </fieldset>\n        );\n      }\n      return (\n        <fieldset\n          key={field.name}\n          className=\"flex-1 flex flex-col gap-4 font-titleFont\"\n        >\n          <label\n            htmlFor={field.id}\n            className=\"text-sm text-gray-500 dark:text-gray-400 font-semibold uppercase tracking-[2px]\"\n          >\n            {field.label}{\" \"}\n            {field.label !== \"Phone Number\" ? (\n              <span className=\"text-red-500\">*</span>\n            ) : (\n              <span className=\"text-gray-400 italic lowercase\">(Optional)</span>\n            )}\n          </label>\n          <div className=\"relative\">\n            <div\n              className=\"p-0.5 font-normal rounded-md hoverFocusGradient\"\n              style={{ position: \"relative\" }}\n            >\n              <input\n                id={field.id}\n                type={field.type}\n                name={field.name}\n                value={value}\n                onChange={handleChange}\n                {...(field.name === \"phoneNumber\"\n                  ? { maxLength: 10 }\n                  : { required: true })}\n                className=\"contactInput text-gray-600 dark:text-gray-200 \"\n              />\n              {touched[field.name] &&\n                (errorMessage ? (\n                  <span style={iconStyle}>\n                    <BsPatchExclamationFill className=\"w-4 h-4 text-red-600 dark:text-red-500\" />\n                  </span>\n                ) : (\n                  <span style={iconStyle}>\n                    <PiSealCheckFill className=\"w-5 h-5 text-green-600 dark:text-green-500\" />\n                  </span>\n                ))}\n            </div>\n            {touched[field.name] && errorMessage && (\n              <div className=\"text-red-600 dark:text-red-500 text-xs mt-1 ml-1.5\">\n                {errorMessage}\n              </div>\n            )}\n          </div>\n        </fieldset>\n      );\n    },\n    [formData, touched, handleChange, validateField]\n  );\n\n  // Memoize field groups\n  const renderedFieldGroups = useMemo(\n    () =>\n      groupedInputs.map((group, index) => (\n        <fieldset key={index} className={group.groupClass}>\n          {group.fields.map((field) => renderField(field))}\n        </fieldset>\n      )),\n    [renderField]\n  );\n\n  return (\n    <section\n      id=\"contact\"\n      className=\"w-full py-14 px-6 sm:px-8 md:px-12 lg:px-16  xl:px-20 \"\n    >\n      <div className=\"border-b border-b-gray-400 dark:border-b-black pb-20\">\n        <Title title=\"HIRE ME\" des=\"Contact Me\" />\n        <div className=\"w-full\">\n          <div className=\"w-full h-auto flex flex-col lg:flex-row justify-between xs:gap-y-8 md:gap-y-10 lg:gap-8 \">\n            <ContactBanner />\n            <motion.div\n              initial={{ scale: 0.8, opacity: 0 }}\n              whileInView={{ scale: 1, opacity: 1 }}\n              transition={{ duration: 1, ease: \"easeInOut\" }}\n              viewport={{ once: false }}\n              className=\"w-full xl:w-[60%] h-full py-10 px-8 sm:px-6 md:px-10 xl:px-8 xl:py-8 flex flex-col gap-8 cardView rounded-lg\"\n            >\n              <form\n                className=\"flex flex-col gap-4 xl:gap-6 py-2 xl:py-5\"\n                onSubmit={handleSend}\n              >\n                {renderedFieldGroups}\n                <div className=\"group relative inline-block p-0.5 rounded-md bg-transparent hover:rounded-full elevatedShadow\">\n                  <button\n                    type=\"submit\"\n                    className=\"ripple-container w-full relative uppercase z-10 px-6 py-3 text-titleFont font-medium rounded-md \n                    cardGradient hover:bg-none hover:rounded-full hover:bg-green-100 \n                    hover:text-green-800  dark:hover:bg-none dark:hover:bg-green-800 dark:hover:text-green-100 tracking-[2px]\"\n                    onMouseDown={createRipple}\n                    aria-label=\"Send Message\"\n                  >\n                    Send Message\n                  </button>\n                  <span\n                    className=\"absolute inset-0 z-0 rounded-md appGradient opacity-0 group-hover:opacity-100 \n                    transition-opacity duration-300 pointer-events-none group-hover:rounded-full\"\n                  ></span>\n                </div>\n              </form>\n            </motion.div>\n          </div>\n        </div>\n      </div>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={3000}\n        className=\"custom-toast-container\"\n        toastClassName={(context) =>\n          context?.type === \"success\"\n            ? \"custom-toast dark:custom-toast\"\n            : \"custom-toast-error dark:custom-toast-error\"\n        }\n        progressClassName={(context) =>\n          context?.type === \"success\"\n            ? \"custom-toast-success-progress dark:custom-toast-success-progress\"\n            : \"custom-toast-error-progress dark:custom-toast-error-progress\"\n        }\n      />\n    </section>\n  );\n};\n\nexport default React.memo(Contact);\n"],"names":["contactMethods","id","label","icon","_jsx","FaEnvelope","className","href","copyText","external","copiedColor","FaLinkedinIn","FaGithub","groupedInputs","groupClass","fields","name","type","rows","ContactLeft","copied","setCopied","useState","handleCopy","useCallback","text","navigator","clipboard","writeText","then","setTimeout","renderedButtons","useMemo","map","_ref","_jsxs","onClick","e","preventDefault","window","open","children","onMouseDown","createRipple","_objectSpread","title","target","rel","concat","FaCheckCircle","motion","div","initial","opacity","scale","whileInView","transition","duration","ease","viewport","once","src","ContactMe","width","height","alt","React","Contact","formData","setFormData","username","phoneNumber","email","subject","message","useEffect","savedData","localStorage","getItem","JSON","parse","setItem","stringify","touched","setTouched","validateField","value","trim","match","includes","test","handleChange","prev","handleSend","async","toast","error","progressClassName","position","autoClose","hideProgressBar","emailError","phoneError","templateParams","to_name","from_name","from_email","phone_number","emailjs","process","REACT_APP_SERVICE_ID","REACT_APP_TEMPLATE_ID","REACT_APP_EMAILJS_PUBLIC_KEY","success","renderField","field","errorMessage","iconStyle","right","top","transform","fontSize","htmlFor","onChange","required","style","BsPatchExclamationFill","PiSealCheckFill","maxLength","renderedFieldGroups","group","index","Title","des","ContactBanner","onSubmit","ToastContainer","toastClassName","context"],"sourceRoot":""}