{"version":3,"file":"static/js/3662.77ffa0fd.chunk.js","mappings":"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","sources":["../node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","../node_modules/framer-motion/dist/es/utils/use-force-update.mjs","components/navbar/components/CrossIcon.jsx","components/navbar/NavbarDrawer.jsx"],"sourcesContent":["import { useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-effect.mjs';\n\nfunction useIsMounted() {\n    const isMounted = useRef(false);\n    useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n\nexport { useIsMounted };\n","import * as React from 'react';\nimport { useId, useRef, useInsertionEffect } from 'react';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n    });\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n        }\n        return () => {\n            document.head.removeChild(style);\n        };\n    }, [isPresent]);\n    return (React.createElement(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size }, React.cloneElement(children, { ref })));\n}\n\nexport { PopChild };\n","import * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    const context = useMemo(() => ({\n        id,\n        initial,\n        isPresent,\n        custom,\n        onExitComplete: (childId) => {\n            presenceChildren.set(childId, true);\n            for (const isComplete of presenceChildren.values()) {\n                if (!isComplete)\n                    return; // can stop searching when any is incomplete\n            }\n            onExitComplete && onExitComplete();\n        },\n        register: (childId) => {\n            presenceChildren.set(childId, false);\n            return () => presenceChildren.delete(childId);\n        },\n    }), \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = React.createElement(PopChild, { isPresent: isPresent }, children);\n    }\n    return (React.createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child) => {\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    // Support deprecated exitBeforeEnter prop\n    if (exitBeforeEnter) {\n        mode = \"wait\";\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, \"Replace exitBeforeEnter with mode='wait'\");\n        }\n    }\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    let [forceRender] = useForceUpdate();\n    const forceRenderLayoutGroup = useContext(LayoutGroupContext).forceRender;\n    if (forceRenderLayoutGroup)\n        forceRender = forceRenderLayoutGroup;\n    const isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exiting = new Set();\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(() => {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exiting.clear();\n    });\n    if (isInitialRender.current) {\n        return (React.createElement(React.Fragment, null, childrenToRender.map((child) => (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child)))));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [...childrenToRender];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for (let i = 0; i < numPresent; i++) {\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach((key) => {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        const child = allChildren.get(key);\n        if (!child)\n            return;\n        const insertionIndex = presentKeys.indexOf(key);\n        const onExit = () => {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            const removeIndex = presentChildren.current.findIndex((presentChild) => presentChild.key === key);\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                if (isMounted.current === false)\n                    return;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child) => {\n        const key = child.key;\n        return exiting.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return (React.createElement(React.Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map((child) => cloneElement(child))));\n};\n\nexport { AnimatePresence };\n","import { sync } from '../frameloop/index.mjs';\nimport { useState, useCallback } from 'react';\nimport { useIsMounted } from './use-is-mounted.mjs';\n\nfunction useForceUpdate() {\n    const isMounted = useIsMounted();\n    const [forcedRenderCount, setForcedRenderCount] = useState(0);\n    const forceRender = useCallback(() => {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */\n    const deferredForceRender = useCallback(() => sync.postRender(forceRender), [forceRender]);\n    return [deferredForceRender, forcedRenderCount];\n}\n\nexport { useForceUpdate };\n","import React from \"react\";\nimport { createRipple } from \"../../layouts/RippleEffect\";\n\nfunction CrossIcon() {\n  return (\n    <div className=\"w-12 h-12 gradientBorderFull transition-transform duration-300\">\n      <button\n        onMouseDown={createRipple}\n        className=\"relative w-full h-full flex items-center justify-center cardGradient transition-colors duration-300 rounded-full ripple-container\"\n      aria-label=\"Close\"\n      >\n        <span className=\"relative block w-5 h-5 text-blue-700 dark:text-cyan-400\">\n          <span className=\"absolute inset-0 top-2 right-1 bg-current rotate-45 w-full h-[4px] rounded-full\" />\n          <span className=\"absolute inset-0 top-2 right-1 bg-current -rotate-45 w-full h-[4px] rounded-full\" />\n        </span>\n      </button>\n    </div>\n  );\n}\n\nexport default React.memo(CrossIcon);","import { AnimatePresence, motion } from \"framer-motion\"; // Fixed import\nimport React, { useCallback } from \"react\";\nimport { Link as ScrollLink } from \"react-scroll\";\nimport { createRipple } from \"./../layouts/RippleEffect\";\nimport CrossIcon from \"./components/CrossIcon\";\nimport ThemeToggle from \"./components/ThemeToggle\";\n// import { ReactComponent as LogoSVG } from \"../../../assets/images/app-logo/app-logo.svg\";\nimport { socialLinks } from \"./Navbar.constants\";\n\nconst NavbarDrawer = ({\n  showMenu,\n  setShowMenu,\n  renderNavItems,\n  toggleTheme,\n  theme,\n}) => {\n  const handleClose = useCallback(() => setShowMenu(false), [setShowMenu]);\n\n  return (\n    <AnimatePresence>\n      {showMenu && (\n        <motion.div\n          key=\"navbar-drawer\"\n          className=\"sm:w-full md:w-2/5 xs:hidden md:block lg:hidden h-screen overflow-auto absolute top-0 left-0\n                     bg-bodyColorWhite dark:bg-bodyColor p-4 backdrop-blur-xl rounded-tr-xl rounded-br-xl scrollbar-hide elevatedShadow\" // Fixed classes\n          initial={{ x: \"-100%\" }}\n          animate={{ x: 0 }}\n          exit={{ x: \"-100%\" }}\n          transition={{ type: \"spring\", stiffness: 100, damping: 25 }}\n        >\n          <div className=\"flex flex-col gap-8 relative md:px-6\">\n            <ScrollLink\n              to=\"home\"\n              smooth\n              offset={-70}\n              duration={500}\n              onClick={handleClose}\n              className=\"cursor-pointer\" // Added for clarity\n            >\n              {/* Using Picture element consistently */}\n              <picture>\n                <source\n                  srcSet={`${process.env.PUBLIC_URL}/app-logo.webp`}\n                  type=\"image/webp\"\n                />\n                <source\n                  srcSet={`${process.env.PUBLIC_URL}/app-logo.png`}\n                  type=\"image/png\"\n                />\n                <img\n                  src={`${process.env.PUBLIC_URL}/app-logo.png`}\n                  alt=\"App logo\"\n                  className=\"w-16 h-16\"\n                  width=\"64\"\n                  height=\"64\"\n                  loading=\"lazy\" // Lazy load in drawer\n                  decoding=\"async\"\n                />\n              </picture>\n            </ScrollLink>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-4 leading-loose\">\n              Lorem ipsum dolor sit, amet consectetur adipisicing elit. Earum\n              soluta perspiciatis molestias enim cum repellat, magnam\n              exercitationem distinctio aliquid nam.\n            </p>\n            <hr className=\"border-gray-300 dark:border-gray-700\" />{\" \"}\n            {/* Fixed class */}\n            <ul className=\"flex flex-col gap-0\">{renderNavItems(true)}</ul>\n            <hr className=\"border-gray-300 dark:border-gray-700\" />{\" \"}\n            {/* Fixed class */}\n            <div className=\"flex flex-col gap-4\">\n              <h2 className=\"text-base uppercase font-titleFont dark:text-white tracking-[2px]\">\n                Find me on\n              </h2>\n              <div className=\"flex gap-4\">\n                {socialLinks.map(({ href, label, icon, color }) => (\n                  <a\n                    key={label}\n                    className=\"bannerIcon ripple-container\"\n                    href={href}\n                    aria-label={label}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    onMouseDown={createRipple}\n                    style={color ? { color } : {}} // Ensure style is an object\n                  >\n                    {icon}\n                  </a>\n                ))}\n              </div>\n            </div>\n            <hr className=\"border-gray-300 dark:border-gray-700\" />{\" \"}\n            {/* Fixed class */}\n            <button\n              className=\"w-fit h-fit flex items-center rounded-full mb-5 ripple-container cardView\"\n              onMouseDown={createRipple}\n              aria-label=\"Toggle theme\"\n              onClick={toggleTheme} // Added onClick\n            >\n              <div className=\"gradientBorderFull block\">\n                {\" \"}\n                {/* Always block inside drawer */}\n                <ThemeToggle theme={theme} toggleTheme={toggleTheme} />\n              </div>\n            </button>\n            <button\n              onClick={handleClose}\n              className=\"absolute top-2 right-3 w-12 h-12 rounded-full flex items-center justify-center\n                         transition-all duration-300 group elevatedShadow\"\n              aria-label=\"Close menu\"\n            >\n              <CrossIcon />\n            </button>\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default React.memo(NavbarDrawer);\n"],"names":["useIsMounted","isMounted","useRef","useIsomorphicLayoutEffect","current","PopChildMeasure","React","getSnapshotBeforeUpdate","prevProps","element","this","props","childRef","isPresent","size","sizeRef","height","offsetHeight","width","offsetWidth","top","offsetTop","left","offsetLeft","componentDidUpdate","render","children","PopChild","_ref","id","useId","ref","useInsertionEffect","dataset","motionPopId","style","document","createElement","head","appendChild","sheet","insertRule","concat","removeChild","PresenceChild","initial","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","useConstant","newChildrenMap","context","useMemo","childId","set","isComplete","values","register","delete","undefined","forEach","_","key","PresenceContext","Provider","value","Map","getChildKey","child","AnimatePresence","exitBeforeEnter","forceRender","forcedRenderCount","setForcedRenderCount","useState","useCallback","sync","postRender","useForceUpdate","forceRenderLayoutGroup","useContext","LayoutGroupContext","filteredChildren","filtered","Children","isValidElement","push","onlyElements","childrenToRender","exiting","Set","presentChildren","allChildren","isInitialRender","updateChildLookup","useUnmountEffect","clear","map","presentKeys","targetKeys","numPresent","length","i","indexOf","add","get","insertionIndex","splice","onExit","removeIndex","findIndex","presentChild","has","cloneElement","CrossIcon","_jsx","className","onMouseDown","createRipple","_jsxs","NavbarDrawer","showMenu","setShowMenu","renderNavItems","toggleTheme","theme","handleClose","motion","div","x","animate","exit","transition","type","stiffness","damping","ScrollLink","to","smooth","offset","duration","onClick","srcSet","process","src","alt","loading","decoding","socialLinks","_ref2","href","label","icon","color","target","rel","ThemeToggle"],"sourceRoot":""}